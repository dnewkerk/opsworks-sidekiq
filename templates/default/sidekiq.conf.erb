# /etc/init/sidekiq.conf - Sidekiq config

# Based on:
# https://github.com/mperham/sidekiq/tree/master/examples/upstart
#
# This example config should work with Ubuntu 12.04+.
# It allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See sidekiq-workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# Hack Upstart's reload command to 'quiet' Sidekiq:
#
#   sudo reload sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#
# This script is not meant to start on bootup, sidekiq-workers.conf
# will start all sidekiq instances explicitly when it starts.
#
# Upstart automatically logs to:
# /var/log/upstart/sidekiq-$index.log
#

description "Sidekiq Background Worker"

setuid <%= @user %>
setgid <%= @group %>

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq. Without declaring these
# as normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal USR1

instance $index

chdir "<%= @release_path %>"

# Include OpsWorks environment variables.
<% @env.each do |key, value| %>
env <%= key %>=<%= (value || '').to_s.gsub('"', '\\"') %>
<% end %>

script
  exec <%= @start_command.gsub('bundle exec sidekiq', 'bundle exec sidekiq -i ${index}') %>
end script
